/**
 * Safe build script to avoid dynamic server usage errors during build
 */
const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// Create a .env.production file with special flags for the build
const createEnvFile = () => {
  const envPath = path.join(__dirname, '..', '.env.production');
  const envContent = `
# Generated by build-safe.js script
# This file helps avoid dynamic server usage errors during build

# Force all dynamic API routes to be skipped during static generation
NEXT_SKIP_API_ROUTES=true

# Indicate that we're in a special build mode
EXPORT_MODE=true

# Preserve original env vars
${fs.existsSync('.env') ? fs.readFileSync('.env', 'utf8') : ''}
`;

  fs.writeFileSync(envPath, envContent);
  console.log('Created .env.production file with build safeguards');
};

// Run the actual build command with the environment properly set
const runBuild = () => {
  console.log('Starting safe build process...');
  
  // Set process env before spawning child
  process.env.NEXT_SKIP_API_ROUTES = 'true';
  process.env.EXPORT_MODE = 'true';
  
  const buildProcess = spawn('npx', ['next', 'build'], {
    stdio: 'inherit',
    shell: true,
    env: {
      ...process.env,
      NODE_ENV: 'production'
    }
  });
  
  buildProcess.on('exit', (code) => {
    console.log(`Build process exited with code ${code}`);
    if (code !== 0) {
      console.error('Build failed - see errors above');
      process.exit(code);
    }
  });
  
  buildProcess.on('error', (err) => {
    console.error('Failed to start build process:', err);
    process.exit(1);
  });
};

// Main function
const main = () => {
  try {
    createEnvFile();
    runBuild();
  } catch (error) {
    console.error('Error in build-safe script:', error);
    process.exit(1);
  }
};

// Run the main function
main(); 